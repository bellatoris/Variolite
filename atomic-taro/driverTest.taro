{"atomicTaroViewState":{"variants":[{"variants":{"currentVersion":{"title":"V1","text":"def distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/02/2016 7:04pm"},"versions":[{"title":"Distance","text":"def distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/02/2016 7:04pm"},{"title":"V1","text":"def distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/02/2016 7:04pm"}]}},{"variants":{"currentVersion":{"title":"","text":"def compute_AllAngles (trip):\n\tdV =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\tangles = np.empty(shape = dV.shape[0])\n\tfor i in range(1, trip.shape[0] - 1):\n\t\tang = computeAngle(dV[i-1], dV[i])\n\t\tnp.append(angles, [ang, dV[i][2]]) #append angle with timepoint\n\treturn angles\n","date":"08/02/2016 7:04pm"},"versions":[{"title":"","text":"def compute_AllAngles (trip):\n\tdV =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\tangles = np.empty(shape = dV.shape[0])\n\tfor i in range(1, trip.shape[0] - 1):\n\t\tang = computeAngle(dV[i-1], dV[i])\n\t\tnp.append(angles, [ang, dV[i][2]]) #append angle with timepoint\n\treturn angles\n","date":"08/02/2016 7:04pm"}]}}]}}