{"atomicTaroViewState":{"variants":[{"variants":{"currentVersion":{"title":"V2","text":"def distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n#Ollie is a dog.\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/04/2016 2:51pm","children":[]},"versions":[{"title":"Ollie","text":"def distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n#Ollie is the best dog really.\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/04/2016 2:50pm","children":[{"title":"V1","text":"def distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n#Ollie is a dog.\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/04/2016 2:50pm","children":[{"title":"V2","text":"def distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n#Ollie is a dog.\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/04/2016 2:51pm","children":[]}]}]},{"title":"V1","text":"def distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n#Ollie is a dog.\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/04/2016 2:50pm","children":[{"title":"V2","text":"def distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n#Ollie is a dog.\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/04/2016 2:51pm","children":[]}]},{"title":"V2","text":"def distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n#Ollie is a dog.\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/04/2016 2:51pm","children":[]}]}},{"variants":{"currentVersion":{"title":"Speed","text":"\"\"\"def findSpeed_Dist(trip):\n\tv = []\n\tdist = 0\n\tfor i in range(1, trip.shape[0]):\n\t\td = distance(trip[i-1][0], trip[i-1][1], trip[i][0], trip[i][1])\n\t\tdist += d\n\t\tv.append(3.6*d)\n\treturn v,dist\"\"\"\n","date":"08/04/2016 2:50pm","children":[]},"versions":[{"title":"Speed","text":"\"\"\"def findSpeed_Dist(trip):\n\tv = []\n\tdist = 0\n\tfor i in range(1, trip.shape[0]):\n\t\td = distance(trip[i-1][0], trip[i-1][1], trip[i][0], trip[i][1])\n\t\tdist += d\n\t\tv.append(3.6*d)\n\treturn v,dist\"\"\"\n","date":"08/04/2016 2:50pm","children":[]}]}},{"variants":{"currentVersion":{"title":"initTrip","text":"\tdef __init__(self, filename):\n\n\t\t#read in trip from file\n\t \ttripPath = np.genfromtxt(filename, delimiter=',', skip_header=1)\n\t \t#add a column for time in seconds (so if we chop data, still have timepoints)\n\t \tself.tripPath = np.append(tripPath, np.arange(tripPath.shape[0]).reshape(tripPath.shape[0],1),1)\n\n\t \t#self.rdp = rdp.rdp_simplify(self.tripPath, epsilon = 0.75)\n\n\t \t#self.angles = compute_AllAngles(self.rdp)\n\t \t#print self.angles\n\n\n\t \t#self.v, self.tripDist = findSpeed_Dist(self.tripPath)\n\t \tself.findSpeed_Hist(self.tripPath)\n\n\t\tself.tripTime = self.tripPath.shape[0] #length of trip in seconds\n\t \tself.advSpeed = self.tripDist/self.tripTime #meters per second\n\t \tself.maxSpeed = max(self.v)\n\n\t \tself.stops = findStops(self.v)#len(findStops(self.v))\n","date":"08/04/2016 2:50pm","children":[]},"versions":[{"title":"initTrip","text":"\tdef __init__(self, filename):\n\n\t\t#read in trip from file\n\t \ttripPath = np.genfromtxt(filename, delimiter=',', skip_header=1)\n\t \t#add a column for time in seconds (so if we chop data, still have timepoints)\n\t \tself.tripPath = np.append(tripPath, np.arange(tripPath.shape[0]).reshape(tripPath.shape[0],1),1)\n\n\t \t#self.rdp = rdp.rdp_simplify(self.tripPath, epsilon = 0.75)\n\n\t \t#self.angles = compute_AllAngles(self.rdp)\n\t \t#print self.angles\n\n\n\t \t#self.v, self.tripDist = findSpeed_Dist(self.tripPath)\n\t \tself.findSpeed_Hist(self.tripPath)\n\n\t\tself.tripTime = self.tripPath.shape[0] #length of trip in seconds\n\t \tself.advSpeed = self.tripDist/self.tripTime #meters per second\n\t \tself.maxSpeed = max(self.v)\n\n\t \tself.stops = findStops(self.v)#len(findStops(self.v))\n","date":"08/04/2016 2:50pm","children":[]}]}}]}}