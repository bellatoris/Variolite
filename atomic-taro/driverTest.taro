{"atomicTaroViewState":{"variants":[{"variants":{"currentVersion":{"title":"V2","text":"\ndef distance(x0, y0, x1, y1): \n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n#Ollie is truly the best\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/03/2016 3:51pm"},"versions":[{"title":"V2","text":"def distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n#Ollie is truly the best but Taro is also an excellent cat\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/03/2016 11:35am"},{"title":"V1","text":"\ndef distance(x0, y0, x1, y1): \n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n#Ollie is truly the best but Taro is also an excellent cat\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/03/2016 3:50pm"},{"title":"V2","text":"\ndef distance(x0, y0, x1, y1): \n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n#Ollie is truly the best\ndef computeNorm(x, y):\n\treturn math.sqrt (x**2 + y**2)\n","date":"08/03/2016 3:51pm"}]}},{"variants":{"currentVersion":{"title":"","text":"def computeAngle (p1, p2):\n\tdot = 0\n\tif computeNorm(p2[0], p2[1]) == 0 or computeNorm(p1[0], p1[1])==0: #may be incorrect\n\t\tdot = 0\n\telse:\n\t\tdot = (p2[0]*p1[0]+p2[1]*p1[1])/float(computeNorm(p1[0], p1[1])*computeNorm(p2[0], p2[1]))\n\n\tif dot > 1:\n\t\tdot = 1\n\telif dot < -1:\n\t\tdot = -1\n\n\treturn math.acos(dot)*180/math.pi\n","date":"08/03/2016 11:35am"},"versions":[{"title":"","text":"def computeAngle (p1, p2):\n\tdot = 0\n\tif computeNorm(p2[0], p2[1]) == 0 or computeNorm(p1[0], p1[1])==0: #may be incorrect\n\t\tdot = 0\n\telse:\n\t\tdot = (p2[0]*p1[0]+p2[1]*p1[1])/float(computeNorm(p1[0], p1[1])*computeNorm(p2[0], p2[1]))\n\n\tif dot > 1:\n\t\tdot = 1\n\telif dot < -1:\n\t\tdot = -1\n\n\treturn math.acos(dot)*180/math.pi\n","date":"08/03/2016 11:35am"}]}},{"variants":{"currentVersion":{"title":"Speed","text":"\"\"\"def findSpeed_Dist(trip):\n\tv = []\n\tdist = 0\n\tfor i in range(1, trip.shape[0]):\n\t\td = distance(trip[i-1][0], trip[i-1][1], trip[i][0], trip[i][1])\n\t\tdist += d\n\t\tv.append(3.6*d)\n\treturn v,dist\"\"\"\n","date":"08/03/2016 11:35am"},"versions":[{"title":"Speed","text":"\"\"\"def findSpeed_Dist(trip):\n\tv = []\n\tdist = 0\n\tfor i in range(1, trip.shape[0]):\n\t\td = distance(trip[i-1][0], trip[i-1][1], trip[i][0], trip[i][1])\n\t\tdist += d\n\t\tv.append(3.6*d)\n\treturn v,dist\"\"\"\n","date":"08/03/2016 11:35am"}]}}]}}