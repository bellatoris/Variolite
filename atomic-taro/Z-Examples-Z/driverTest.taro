{"atomicTaroViewState":{"variants":{"rootVersion":{"active":true,"id":"9657df853025da868fe49a507426b05ab834b981","title":"driverTest.py","subtitle":0,"text":"import matplotlib.pyplot as pyplot\nimport numpy as np\nimport math\n\n\n\ndef distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n\ndef computeAngle (p1, p2):\n\tdot = 0\n\tdot = (p2[0]*p1[0]+p2[1]*p1[1])/float(computeNorm(p1[0], p1[1])*computeNorm(p2[0], p2[1]))\n\treturn math.acos(dot)*180/math.pi\n\n\ndef compute_AllAngles (trip):\n\tdV =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\tangles = np.empty(shape = dV.shape[0])\n\tfor i in range(1, trip.shape[0] - 1):\n\t\tang = computeAngle(dV[i-1], dV[i])\n\t\tnp.append(angles, [ang, dV[i][2]]) #append angle with timepoint\n\treturn angles\n\ndef findStops(speeds):\n\tstops = [] #stops are a start and end time pair\n\tstart = -1\n\tend = -1\n\tfor i in range(1, len(speeds)):\n\t\tadvS = (speeds[i] + speeds[i-1])/2 #smooth out noise in stop duration\n\t\tif speeds[i] == 0: #start of stop\n\t\t\tend = i\n\t\t\tif start == -1:\n\t\t\t\tstart = i\n\t\telif (start > -1) and (advS > 1):\n\t\t\tstops.append([start,end])\n\t\t\tstart = -1\n\t\t\tend = -1\n\tif start > -1:\n\t\tstops.append([start, len(speeds)])\n\treturn stops \n\n\ndef printHist_Feature(hist):\n\th = \"\"\n\tfor i in range(len(hist)-1):\n\t\th += str(hist[i])+\",\"\n\t#to avoid final comma (will mess up input)\n\th += str(hist[len(hist)-1])\n\treturn h\n\n\nclass Trip(object):\n\tdef __init__(self, filename):\n\n\t\t#read in trip from file\n\t \ttripPath = np.genfromtxt(filename, delimiter=',', skip_header=1)\n\n\t \t#add a column for time in seconds (so if we chop data, still have timepoints)\n\t \tself.tripPath = np.append(tripPath, np.arange(tripPath.shape[0]).reshape(tripPath.shape[0],1),1)\n\n\t \tself.rdp = rdp.rdp_simplify(self.tripPath, epsilon = 0.75)\n\n\t \tself.angles = compute_AllAngles(self.rdp)\n\t \t#print self.angles\n\n\n\t \tself.v, self.tripDist = findSpeed_Dist(self.tripPath)\n\t \tself.findSpeed_Hist(self.tripPath)\n\n\t\tself.tripTime = self.tripPath.shape[0] #length of trip in seconds\n\t \tself.advSpeed = self.tripDist/self.tripTime #meters per second\n\t \tself.maxSpeed = max(self.v)\n\n\t \tself.stops = findStops(self.v)#len(findStops(self.v)) \n\n\n\n\t#changed the implementation of this method, which brought the metrics up a bit\n\t#I used km/h, but we can easily change that\n\tdef findSpeed_Hist(self, trip):\n\n\t\tspeedList = []\n\t\tspeedList.append(0)\n\t\taccList = []\n\t\taccList.append(0)\n\n\t\tfor i in range (1,len(self.tripPath)):\n\n\t\t\tspeedList.append (round(3.6*distance(self.tripPath[i-1][0], self.tripPath[i-1][1], self.tripPath[i][0], self.tripPath[i][1])))\n\t\t\taccList.append(speedList[i]-speedList[i-1])\n\n\t\tmypmf = Pmf.MakePmfFromList(speedList)\n\t\tself.speed_hist = []\n\t\tMAX = 220\n\t\tvals, freqs = mypmf.Render()\n\t\tval = 0\n\t\tfor i in range(MAX):\n\n\t\t\ttry:\n\t\t\t\tval = freqs[vals.index(i)]\n\t\t\texcept ValueError:\n\t\t\t\tval = 0\n\n\t\t\tself.speed_hist.append (val)\n\n\t\tmypmf = Pmf.MakePmfFromList(accList)\n\t\tself.acc_hist = []\n\t\tMAX = 50\n\t\tvals, freqs = mypmf.Render()\n\t\tval = 0\n\t\tfor i in range(MAX):\n\n\t\t\ttry:\n\t\t\t\tval = freqs[vals.index(i)]\n\t\t\texcept ValueError:\n\t\t\t\tval = 0\n\n\t\t\tself.acc_hist.append (val)\n\t\t#print self.speed_hist\n\n\t\t#mypmf.Items()\n\t\t#sys.exit()\n\n\n\t\tvel =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\t\tself.v = (vel[:,0]**2 + vel[:,1]**2)**0.5 #take distance\n\t\tself.tripDist = np.sum(self.v)\n\t\t\"\"\"\n\t\tself.acc = np.diff(self.v, axis = 0)\n\t\tself.speed_hist = [np.percentile(self.v, i*5) for i in range(1,20)]\n\t\tself.acc_hist = [np.percentile(self.acc, i*10) for i in range(1,10)]\n\t\t\"\"\"\n\n\n\tdef printFeatures(self):\n\t\tfeatures = \"\"\n\t\tfeatures += printHist_Feature(self.speed_hist)+\",\"\n\t\tfeatures += str(self.tripDist)\n\n\t\treturn features + \"\\n\"\n\n\tdef plotTrip(self):\n\t\t#first figure is the xy path\n\t \tpyplot.figure(1)\n\t\t#pyplot.subplot(211)\n\t\tstartPoint = (self.tripPath[0])\n\t\tendPoint = (self.tripPath[self.tripPath.shape[0]-1])\n\t\tpyplot.plot(self.tripPath[:,0], self.tripPath[:,1], 'rx', startPoint[0], startPoint[1], 'gD', endPoint[0], endPoint[1], 'bD')\n\t\tpyplot.plot(self.rdp[:,0], self.rdp[:,1], 'bo')\n\t\tfor st,end in self.stops:\n\t\t\tpyplot.plot(self.tripPath[st][0], self.tripPath[st][1], 'rs')\n\t\t#second figure is velocity over time\n\t\t\"\"\"pyplot.subplot(212)\n\t\tpyplot.plot(self.v, 'g-')\n\t\tfor st,end in self.stops:\n\t\t\tpyplot.plot(st,self.v[st], 'bs', end, self.v[st], 'rs')\n\t\t\t#print end - st\n\t\tpyplot.plot(self.acc, 'b-')\"\"\"\n\t\tpyplot.show()\n\nprint computeAngle([1,4], [6,12])\n#print \"Trip #86 v=23.6, a=4.8, d=52 miles, stops = 6, anvAngle = 5.2\"\n#print \"Trip #86 v=24, a=4.8, d=52 miles, stops = 12, anvAngle = 5.2\"\n#print \"Trip #86 v=24, a=4.8, d=52 miles, stops = 12, anvAngle = 5.8\"\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 4, avAngle = 16.5\"\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 4, avAngle = 18.9\"\n\n\n\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 9, avAngle = 18.9\"\n    ","date":"09/21/2016 2:52pm","branches":[],"commits":[{"date":"09/21/2016 2:52pm","text":[{"text":"import matplotlib.pyplot as pyplot\nimport numpy as np\nimport math\n\n\n\ndef distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n\n"},{"varID":"d68b27a9b6fd498cf56207d9bbb00abb1d94bd23","verID":"d68b27a9b6fd498cf56207d9bbb00abb1d94bd23","commitID":0},{"text":"\n\n\ndef compute_AllAngles (trip):\n\tdV =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\tangles = np.empty(shape = dV.shape[0])\n\tfor i in range(1, trip.shape[0] - 1):\n\t\tang = computeAngle(dV[i-1], dV[i])\n\t\tnp.append(angles, [ang, dV[i][2]]) #append angle with timepoint\n\treturn angles\n\n"},{"varID":"2428d170626b142acd1a93da19f06239f19325fa","verID":"2428d170626b142acd1a93da19f06239f19325fa","commitID":0},{"text":"\n\n\ndef printHist_Feature(hist):\n\th = \"\"\n\tfor i in range(len(hist)-1):\n\t\th += str(hist[i])+\",\"\n\t#to avoid final comma (will mess up input)\n\th += str(hist[len(hist)-1])\n\treturn h\n\n\nclass Trip(object):\n\tdef __init__(self, filename):\n\n\t\t#read in trip from file\n\t \ttripPath = np.genfromtxt(filename, delimiter=',', skip_header=1)\n\n"},{"varID":"04370158c90ebb7d61d6fa8cf83dbf15b2074dd8","verID":"04370158c90ebb7d61d6fa8cf83dbf15b2074dd8","commitID":0},{"text":"\n\n\n\n\t#changed the implementation of this method, which brought the metrics up a bit\n\t#I used km/h, but we can easily change that\n\tdef findSpeed_Hist(self, trip):\n\n\t\tspeedList = []\n\t\tspeedList.append(0)\n\t\taccList = []\n\t\taccList.append(0)\n\n\t\tfor i in range (1,len(self.tripPath)):\n\n\t\t\tspeedList.append (round(3.6*distance(self.tripPath[i-1][0], self.tripPath[i-1][1], self.tripPath[i][0], self.tripPath[i][1])))\n\t\t\taccList.append(speedList[i]-speedList[i-1])\n\n\t\tmypmf = Pmf.MakePmfFromList(speedList)\n\t\tself.speed_hist = []\n\t\tMAX = 220\n\t\tvals, freqs = mypmf.Render()\n\t\tval = 0\n\t\tfor i in range(MAX):\n\n\t\t\ttry:\n\t\t\t\tval = freqs[vals.index(i)]\n\t\t\texcept ValueError:\n\t\t\t\tval = 0\n\n\t\t\tself.speed_hist.append (val)\n\n\t\tmypmf = Pmf.MakePmfFromList(accList)\n\t\tself.acc_hist = []\n\t\tMAX = 50\n\t\tvals, freqs = mypmf.Render()\n\t\tval = 0\n\t\tfor i in range(MAX):\n\n\t\t\ttry:\n\t\t\t\tval = freqs[vals.index(i)]\n\t\t\texcept ValueError:\n\t\t\t\tval = 0\n\n\t\t\tself.acc_hist.append (val)\n\t\t#print self.speed_hist\n\n\t\t#mypmf.Items()\n\t\t#sys.exit()\n\n\n\t\tvel =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\t\tself.v = (vel[:,0]**2 + vel[:,1]**2)**0.5 #take distance\n\t\tself.tripDist = np.sum(self.v)\n\t\t\"\"\"\n\t\tself.acc = np.diff(self.v, axis = 0)\n\t\tself.speed_hist = [np.percentile(self.v, i*5) for i in range(1,20)]\n\t\tself.acc_hist = [np.percentile(self.acc, i*10) for i in range(1,10)]\n\t\t\"\"\"\n\n\n\tdef printFeatures(self):\n\t\tfeatures = \"\"\n\t\tfeatures += printHist_Feature(self.speed_hist)+\",\"\n\t\tfeatures += str(self.tripDist)\n\n\t\treturn features + \"\\n\"\n\n\tdef plotTrip(self):\n\t\t#first figure is the xy path\n\t \tpyplot.figure(1)\n\t\t#pyplot.subplot(211)\n\t\tstartPoint = (self.tripPath[0])\n\t\tendPoint = (self.tripPath[self.tripPath.shape[0]-1])\n\t\tpyplot.plot(self.tripPath[:,0], self.tripPath[:,1], 'rx', startPoint[0], startPoint[1], 'gD', endPoint[0], endPoint[1], 'bD')\n\t\tpyplot.plot(self.rdp[:,0], self.rdp[:,1], 'bo')\n\t\tfor st,end in self.stops:\n\t\t\tpyplot.plot(self.tripPath[st][0], self.tripPath[st][1], 'rs')\n\t\t#second figure is velocity over time\n\t\t\"\"\"pyplot.subplot(212)\n\t\tpyplot.plot(self.v, 'g-')\n\t\tfor st,end in self.stops:\n\t\t\tpyplot.plot(st,self.v[st], 'bs', end, self.v[st], 'rs')\n\t\t\t#print end - st\n\t\tpyplot.plot(self.acc, 'b-')\"\"\"\n\t\tpyplot.show()\n\nprint computeAngle([1,4], [6,12])\n#print \"Trip #86 v=23.6, a=4.8, d=52 miles, stops = 6, anvAngle = 5.2\"\n#print \"Trip #86 v=24, a=4.8, d=52 miles, stops = 12, anvAngle = 5.2\"\n#print \"Trip #86 v=24, a=4.8, d=52 miles, stops = 12, anvAngle = 5.8\"\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 4, avAngle = 16.5\"\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 4, avAngle = 18.9\"\n\n\n\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 9, avAngle = 18.9\"\n    "}]},{"date":"09/21/2016 2:54pm","text":[{"text":"import matplotlib.pyplot as pyplot\nimport numpy as np\nimport math\n\n\n\ndef distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n\n"},{"varID":"d68b27a9b6fd498cf56207d9bbb00abb1d94bd23","verID":"d68b27a9b6fd498cf56207d9bbb00abb1d94bd23","commitID":1},{"text":"\n\n\ndef compute_AllAngles (trip):\n\tdV =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\tangles = np.empty(shape = dV.shape[0])\n\tfor i in range(1, trip.shape[0] - 1):\n\t\tang = computeAngle(dV[i-1], dV[i])\n\t\tnp.append(angles, [ang, dV[i][2]]) #append angle with timepoint\n\treturn angles\n\n"},{"varID":"2428d170626b142acd1a93da19f06239f19325fa","verID":"2428d170626b142acd1a93da19f06239f19325fa","commitID":1},{"text":"\n\n\ndef printHist_Feature(hist):\n\th = \"\"\n\tfor i in range(len(hist)-1):\n\t\th += str(hist[i])+\",\"\n\t#to avoid final comma (will mess up input)\n\th += str(hist[len(hist)-1])\n\treturn h\n\n\nclass Trip(object):\n\tdef __init__(self, filename):\n\n\t\t#read in trip from file\n\t \ttripPath = np.genfromtxt(filename, delimiter=',', skip_header=1)\n\n"},{"varID":"04370158c90ebb7d61d6fa8cf83dbf15b2074dd8","verID":"04370158c90ebb7d61d6fa8cf83dbf15b2074dd8","commitID":1},{"text":"\n\n\n\n\t#changed the implementation of this method, which brought the metrics up a bit\n\t#I used km/h, but we can easily change that\n\tdef findSpeed_Hist(self, trip):\n\n\t\tspeedList = []\n\t\tspeedList.append(0)\n\t\taccList = []\n\t\taccList.append(0)\n\n\t\tfor i in range (1,len(self.tripPath)):\n\n\t\t\tspeedList.append (round(3.6*distance(self.tripPath[i-1][0], self.tripPath[i-1][1], self.tripPath[i][0], self.tripPath[i][1])))\n\t\t\taccList.append(speedList[i]-speedList[i-1])\n\n\t\tmypmf = Pmf.MakePmfFromList(speedList)\n\t\tself.speed_hist = []\n\t\tMAX = 220\n\t\tvals, freqs = mypmf.Render()\n\t\tval = 0\n\t\tfor i in range(MAX):\n\n\t\t\ttry:\n\t\t\t\tval = freqs[vals.index(i)]\n\t\t\texcept ValueError:\n\t\t\t\tval = 0\n\n\t\t\tself.speed_hist.append (val)\n\n\t\tmypmf = Pmf.MakePmfFromList(accList)\n\t\tself.acc_hist = []\n\t\tMAX = 50\n\t\tvals, freqs = mypmf.Render()\n\t\tval = 0\n\t\tfor i in range(MAX):\n\n\t\t\ttry:\n\t\t\t\tval = freqs[vals.index(i)]\n\t\t\texcept ValueError:\n\t\t\t\tval = 0\n\n\t\t\tself.acc_hist.append (val)\n\t\t#print self.speed_hist\n\n\t\t#mypmf.Items()\n\t\t#sys.exit()\n\n\n\t\tvel =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\t\tself.v = (vel[:,0]**2 + vel[:,1]**2)**0.5 #take distance\n\t\tself.tripDist = np.sum(self.v)\n\t\t\"\"\"\n\t\tself.acc = np.diff(self.v, axis = 0)\n\t\tself.speed_hist = [np.percentile(self.v, i*5) for i in range(1,20)]\n\t\tself.acc_hist = [np.percentile(self.acc, i*10) for i in range(1,10)]\n\t\t\"\"\"\n\n\n\tdef printFeatures(self):\n\t\tfeatures = \"\"\n\t\tfeatures += printHist_Feature(self.speed_hist)+\",\"\n\t\tfeatures += str(self.tripDist)\n\n\t\treturn features + \"\\n\"\n\n\tdef plotTrip(self):\n\t\t#first figure is the xy path\n\t \tpyplot.figure(1)\n\t\t#pyplot.subplot(211)\n\t\tstartPoint = (self.tripPath[0])\n\t\tendPoint = (self.tripPath[self.tripPath.shape[0]-1])\n\t\tpyplot.plot(self.tripPath[:,0], self.tripPath[:,1], 'rx', startPoint[0], startPoint[1], 'gD', endPoint[0], endPoint[1], 'bD')\n\t\tpyplot.plot(self.rdp[:,0], self.rdp[:,1], 'bo')\n\t\tfor st,end in self.stops:\n\t\t\tpyplot.plot(self.tripPath[st][0], self.tripPath[st][1], 'rs')\n\t\t#second figure is velocity over time\n\t\t\"\"\"pyplot.subplot(212)\n\t\tpyplot.plot(self.v, 'g-')\n\t\tfor st,end in self.stops:\n\t\t\tpyplot.plot(st,self.v[st], 'bs', end, self.v[st], 'rs')\n\t\t\t#print end - st\n\t\tpyplot.plot(self.acc, 'b-')\"\"\"\n\t\tpyplot.show()\n\nprint computeAngle([1,4], [6,12])\n#print \"Trip #86 v=23.6, a=4.8, d=52 miles, stops = 6, anvAngle = 5.2\"\n#print \"Trip #86 v=24, a=4.8, d=52 miles, stops = 12, anvAngle = 5.2\"\n#print \"Trip #86 v=24, a=4.8, d=52 miles, stops = 12, anvAngle = 5.8\"\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 4, avAngle = 16.5\"\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 4, avAngle = 18.9\"\n\n\n\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 9, avAngle = 18.9\"\n    "}]},{"date":"09/21/2016 2:54pm","text":[{"text":"import matplotlib.pyplot as pyplot\nimport numpy as np\nimport math\n\n\n\ndef distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n\n"},{"varID":"d68b27a9b6fd498cf56207d9bbb00abb1d94bd23","verID":"d68b27a9b6fd498cf56207d9bbb00abb1d94bd23","commitID":2},{"text":"\n\n\ndef compute_AllAngles (trip):\n\tdV =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\tangles = np.empty(shape = dV.shape[0])\n\tfor i in range(1, trip.shape[0] - 1):\n\t\tang = computeAngle(dV[i-1], dV[i])\n\t\tnp.append(angles, [ang, dV[i][2]]) #append angle with timepoint\n\treturn angles\n\n"},{"varID":"2428d170626b142acd1a93da19f06239f19325fa","verID":"2428d170626b142acd1a93da19f06239f19325fa","commitID":2},{"text":"\n\n\ndef printHist_Feature(hist):\n\th = \"\"\n\tfor i in range(len(hist)-1):\n\t\th += str(hist[i])+\",\"\n\t#to avoid final comma (will mess up input)\n\th += str(hist[len(hist)-1])\n\treturn h\n\n\nclass Trip(object):\n\tdef __init__(self, filename):\n\n\t\t#read in trip from file\n\t \ttripPath = np.genfromtxt(filename, delimiter=',', skip_header=1)\n\n"},{"varID":"04370158c90ebb7d61d6fa8cf83dbf15b2074dd8","verID":"04370158c90ebb7d61d6fa8cf83dbf15b2074dd8","commitID":2},{"text":"\n\n\n\n\t#changed the implementation of this method, which brought the metrics up a bit\n\t#I used km/h, but we can easily change that\n\tdef findSpeed_Hist(self, trip):\n\n\t\tspeedList = []\n\t\tspeedList.append(0)\n\t\taccList = []\n\t\taccList.append(0)\n\n\t\tfor i in range (1,len(self.tripPath)):\n\n\t\t\tspeedList.append (round(3.6*distance(self.tripPath[i-1][0], self.tripPath[i-1][1], self.tripPath[i][0], self.tripPath[i][1])))\n\t\t\taccList.append(speedList[i]-speedList[i-1])\n\n\t\tmypmf = Pmf.MakePmfFromList(speedList)\n\t\tself.speed_hist = []\n\t\tMAX = 220\n\t\tvals, freqs = mypmf.Render()\n\t\tval = 0\n\t\tfor i in range(MAX):\n\n\t\t\ttry:\n\t\t\t\tval = freqs[vals.index(i)]\n\t\t\texcept ValueError:\n\t\t\t\tval = 0\n\n\t\t\tself.speed_hist.append (val)\n\n\t\tmypmf = Pmf.MakePmfFromList(accList)\n\t\tself.acc_hist = []\n\t\tMAX = 50\n\t\tvals, freqs = mypmf.Render()\n\t\tval = 0\n\t\tfor i in range(MAX):\n\n\t\t\ttry:\n\t\t\t\tval = freqs[vals.index(i)]\n\t\t\texcept ValueError:\n\t\t\t\tval = 0\n\n\t\t\tself.acc_hist.append (val)\n\t\t#print self.speed_hist\n\n\t\t#mypmf.Items()\n\t\t#sys.exit()\n\n\n\t\tvel =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\t\tself.v = (vel[:,0]**2 + vel[:,1]**2)**0.5 #take distance\n\t\tself.tripDist = np.sum(self.v)\n\t\t\"\"\"\n\t\tself.acc = np.diff(self.v, axis = 0)\n\t\tself.speed_hist = [np.percentile(self.v, i*5) for i in range(1,20)]\n\t\tself.acc_hist = [np.percentile(self.acc, i*10) for i in range(1,10)]\n\t\t\"\"\"\n\n\n\tdef printFeatures(self):\n\t\tfeatures = \"\"\n\t\tfeatures += printHist_Feature(self.speed_hist)+\",\"\n\t\tfeatures += str(self.tripDist)\n\n\t\treturn features + \"\\n\"\n\n\tdef plotTrip(self):\n\t\t#first figure is the xy path\n\t \tpyplot.figure(1)\n\t\t#pyplot.subplot(211)\n\t\tstartPoint = (self.tripPath[0])\n\t\tendPoint = (self.tripPath[self.tripPath.shape[0]-1])\n\t\tpyplot.plot(self.tripPath[:,0], self.tripPath[:,1], 'rx', startPoint[0], startPoint[1], 'gD', endPoint[0], endPoint[1], 'bD')\n\t\tpyplot.plot(self.rdp[:,0], self.rdp[:,1], 'bo')\n\t\tfor st,end in self.stops:\n\t\t\tpyplot.plot(self.tripPath[st][0], self.tripPath[st][1], 'rs')\n\t\t#second figure is velocity over time\n\t\t\"\"\"pyplot.subplot(212)\n\t\tpyplot.plot(self.v, 'g-')\n\t\tfor st,end in self.stops:\n\t\t\tpyplot.plot(st,self.v[st], 'bs', end, self.v[st], 'rs')\n\t\t\t#print end - st\n\t\tpyplot.plot(self.acc, 'b-')\"\"\"\n\t\tpyplot.show()\n\nprint computeAngle([1,4], [6,12])\n#print \"Trip #86 v=23.6, a=4.8, d=52 miles, stops = 6, anvAngle = 5.2\"\n#print \"Trip #86 v=24, a=4.8, d=52 miles, stops = 12, anvAngle = 5.2\"\n#print \"Trip #86 v=24, a=4.8, d=52 miles, stops = 12, anvAngle = 5.8\"\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 4, avAngle = 16.5\"\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 4, avAngle = 18.9\"\n\n\n\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 9, avAngle = 18.9\"\n    "}]},{"date":"09/21/2016 2:55pm","text":[{"text":"import matplotlib.pyplot as pyplot\nimport numpy as np\nimport math\n\n\n\ndef distance(x0, y0, x1, y1):\n\treturn math.sqrt((x1-x0)**2 + (y1-y0)**2)\n\n"},{"varID":"d68b27a9b6fd498cf56207d9bbb00abb1d94bd23","verID":"21e7e103cf57c1ee82bf498a9818d1c4dd41d42e","commitID":0},{"text":"\n\n\ndef compute_AllAngles (trip):\n\tdV =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\tangles = np.empty(shape = dV.shape[0])\n\tfor i in range(1, trip.shape[0] - 1):\n\t\tang = computeAngle(dV[i-1], dV[i])\n\t\tnp.append(angles, [ang, dV[i][2]]) #append angle with timepoint\n\treturn angles\n\n"},{"varID":"2428d170626b142acd1a93da19f06239f19325fa","verID":"2428d170626b142acd1a93da19f06239f19325fa","commitID":3},{"text":"\n\n\ndef printHist_Feature(hist):\n\th = \"\"\n\tfor i in range(len(hist)-1):\n\t\th += str(hist[i])+\",\"\n\t#to avoid final comma (will mess up input)\n\th += str(hist[len(hist)-1])\n\treturn h\n\n\nclass Trip(object):\n\tdef __init__(self, filename):\n\n\t\t#read in trip from file\n\t \ttripPath = np.genfromtxt(filename, delimiter=',', skip_header=1)\n\n"},{"varID":"04370158c90ebb7d61d6fa8cf83dbf15b2074dd8","verID":"04370158c90ebb7d61d6fa8cf83dbf15b2074dd8","commitID":3},{"text":"\n\n\n\n\t#changed the implementation of this method, which brought the metrics up a bit\n\t#I used km/h, but we can easily change that\n\tdef findSpeed_Hist(self, trip):\n\n\t\tspeedList = []\n\t\tspeedList.append(0)\n\t\taccList = []\n\t\taccList.append(0)\n\n\t\tfor i in range (1,len(self.tripPath)):\n\n\t\t\tspeedList.append (round(3.6*distance(self.tripPath[i-1][0], self.tripPath[i-1][1], self.tripPath[i][0], self.tripPath[i][1])))\n\t\t\taccList.append(speedList[i]-speedList[i-1])\n\n\t\tmypmf = Pmf.MakePmfFromList(speedList)\n\t\tself.speed_hist = []\n\t\tMAX = 220\n\t\tvals, freqs = mypmf.Render()\n\t\tval = 0\n\t\tfor i in range(MAX):\n\n\t\t\ttry:\n\t\t\t\tval = freqs[vals.index(i)]\n\t\t\texcept ValueError:\n\t\t\t\tval = 0\n\n\t\t\tself.speed_hist.append (val)\n\n\t\tmypmf = Pmf.MakePmfFromList(accList)\n\t\tself.acc_hist = []\n\t\tMAX = 50\n\t\tvals, freqs = mypmf.Render()\n\t\tval = 0\n\t\tfor i in range(MAX):\n\n\t\t\ttry:\n\t\t\t\tval = freqs[vals.index(i)]\n\t\t\texcept ValueError:\n\t\t\t\tval = 0\n\n\t\t\tself.acc_hist.append (val)\n\t\t#print self.speed_hist\n\n\t\t#mypmf.Items()\n\t\t#sys.exit()\n\n\n\t\tvel =  np.diff(trip, axis = 0) #x1-x0 and y1-y0\n\t\tself.v = (vel[:,0]**2 + vel[:,1]**2)**0.5 #take distance\n\t\tself.tripDist = np.sum(self.v)\n\t\t\"\"\"\n\t\tself.acc = np.diff(self.v, axis = 0)\n\t\tself.speed_hist = [np.percentile(self.v, i*5) for i in range(1,20)]\n\t\tself.acc_hist = [np.percentile(self.acc, i*10) for i in range(1,10)]\n\t\t\"\"\"\n\n\n\tdef printFeatures(self):\n\t\tfeatures = \"\"\n\t\tfeatures += printHist_Feature(self.speed_hist)+\",\"\n\t\tfeatures += str(self.tripDist)\n\n\t\treturn features + \"\\n\"\n\n\tdef plotTrip(self):\n\t\t#first figure is the xy path\n\t \tpyplot.figure(1)\n\t\t#pyplot.subplot(211)\n\t\tstartPoint = (self.tripPath[0])\n\t\tendPoint = (self.tripPath[self.tripPath.shape[0]-1])\n\t\tpyplot.plot(self.tripPath[:,0], self.tripPath[:,1], 'rx', startPoint[0], startPoint[1], 'gD', endPoint[0], endPoint[1], 'bD')\n\t\tpyplot.plot(self.rdp[:,0], self.rdp[:,1], 'bo')\n\t\tfor st,end in self.stops:\n\t\t\tpyplot.plot(self.tripPath[st][0], self.tripPath[st][1], 'rs')\n\t\t#second figure is velocity over time\n\t\t\"\"\"pyplot.subplot(212)\n\t\tpyplot.plot(self.v, 'g-')\n\t\tfor st,end in self.stops:\n\t\t\tpyplot.plot(st,self.v[st], 'bs', end, self.v[st], 'rs')\n\t\t\t#print end - st\n\t\tpyplot.plot(self.acc, 'b-')\"\"\"\n\t\tpyplot.show()\n\nprint computeAngle([1,4], [6,12])\n#print \"Trip #86 v=23.6, a=4.8, d=52 miles, stops = 6, anvAngle = 5.2\"\n#print \"Trip #86 v=24, a=4.8, d=52 miles, stops = 12, anvAngle = 5.2\"\n#print \"Trip #86 v=24, a=4.8, d=52 miles, stops = 12, anvAngle = 5.8\"\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 4, avAngle = 16.5\"\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 4, avAngle = 18.9\"\n\n\n\n#print \"Trip #87 v=44.0, a=0.2, d=2 miles, stops = 9, avAngle = 18.9\"\n    "}]}],"nested":[{"rootVersion":{"active":true,"id":"d68b27a9b6fd498cf56207d9bbb00abb1d94bd23","title":"angle","subtitle":0,"text":"def computeAngle (p1, p2):\n\treturn math.atan2(p1[0]-p2[0],p1[1]-p2[1])","date":"09/21/2016 2:52pm","branches":[{"active":true,"id":"21e7e103cf57c1ee82bf498a9818d1c4dd41d42e","title":"angle-norm","text":"def computeAngle (p1, p2):\n\tdot = 0\n\tdot = (p2[0]*p1[0]+p2[1]*p1[1])/float(computeNorm(p1[0], p1[1])*computeNorm(p2[0], p2[1]))\n\treturn math.acos(dot)*180/math.pi","date":"09/21/2016 2:54pm","branches":[],"commits":[{"date":"09/21/2016 2:55pm","text":[{"text":"def computeAngle (p1, p2):\n\tdot = 0\n\tdot = (p2[0]*p1[0]+p2[1]*p1[1])/float(computeNorm(p1[0], p1[1])*computeNorm(p2[0], p2[1]))\n\treturn math.acos(dot)*180/math.pi"}]}],"nested":[]}],"commits":[{"date":"09/21/2016 2:52pm","text":[{"text":"def computeAngle (p1, p2):\n\tdot = 0\n\tif computeNorm(p2[0], p2[1]) == 0\n\t\tdot = 0\n\t\n\treturn math.acos(dot)*180/math.pi"}]},{"date":"09/21/2016 2:54pm","text":[{"text":"def computeAngle (p1, p2):\n\treturn math.atan2(p1[0]-p2[0],p1[1]-p2[1])"}]},{"date":"09/21/2016 2:54pm","text":[{"text":"def computeAngle (p1, p2):\n\treturn math.atan2(p1[0]-p2[0],p1[1]-p2[1])"}]}],"nested":[]},"currentVersion":{"title":"angle-norm"}},{"rootVersion":{"active":true,"id":"2428d170626b142acd1a93da19f06239f19325fa","title":"stops with smoothing","subtitle":0,"text":"def findStops(speeds):\n\tstops = [] #stops are a start and end time pair\n\tstart = -1\n\tend = -1\n\tfor i in range(1, len(speeds)):\n\t\tadvS = (speeds[i] + speeds[i-1])/2 #smooth out noise in stop duration\n\t\tif speeds[i] == 0: #start of stop\n\t\t\tend = i\n\t\t\tif start == -1:\n\t\t\t\tstart = i\n\t\telif (start > -1) and (advS > 1):\n\t\t\tstops.append([start,end])\n\t\t\tstart = -1\n\t\t\tend = -1\n\tif start > -1:\n\t\tstops.append([start, len(speeds)])\n\treturn stops ","date":"09/21/2016 2:52pm","branches":[],"commits":[{"date":"09/21/2016 2:52pm","text":[{"text":"def findStops(speeds):\n\tstops = [] #stops are a start and end time pair\n\tstart = -1\n\tend = -1\n\tfor i in range(1, len(speeds)):\n\t\tadvS = (speeds[i] + speeds[i-1])/2 #smooth out noise in stop duration\n\t\tif speeds[i] == 0: #start of stop\n\t\t\tend = i\n\t\t\tif start == -1:\n\t\t\t\tstart = i\n\t\telif (start > -1) and (advS > 1):\n\t\t\tstops.append([start,end])\n\t\t\tstart = -1\n\t\t\tend = -1\n\tif start > -1:\n\t\tstops.append([start, len(speeds)])\n\treturn stops "}]},{"date":"09/21/2016 2:54pm","text":[{"text":"def findStops(speeds):\n\tstops = [] #stops are a start and end time pair\n\tstart = -1\n\tend = -1\n\tfor i in range(1, len(speeds)):\n\t\tadvS = (speeds[i] + speeds[i-1])/2 #smooth out noise in stop duration\n\t\tif speeds[i] == 0: #start of stop\n\t\t\tend = i\n\t\t\tif start == -1:\n\t\t\t\tstart = i\n\t\telif (start > -1) and (advS > 1):\n\t\t\tstops.append([start,end])\n\t\t\tstart = -1\n\t\t\tend = -1\n\tif start > -1:\n\t\tstops.append([start, len(speeds)])\n\treturn stops "}]},{"date":"09/21/2016 2:54pm","text":[{"text":"def findStops(speeds):\n\tstops = [] #stops are a start and end time pair\n\tstart = -1\n\tend = -1\n\tfor i in range(1, len(speeds)):\n\t\tadvS = (speeds[i] + speeds[i-1])/2 #smooth out noise in stop duration\n\t\tif speeds[i] == 0: #start of stop\n\t\t\tend = i\n\t\t\tif start == -1:\n\t\t\t\tstart = i\n\t\telif (start > -1) and (advS > 1):\n\t\t\tstops.append([start,end])\n\t\t\tstart = -1\n\t\t\tend = -1\n\tif start > -1:\n\t\tstops.append([start, len(speeds)])\n\treturn stops "}]},{"date":"09/21/2016 2:55pm","text":[{"text":"def findStops(speeds):\n\tstops = [] #stops are a start and end time pair\n\tstart = -1\n\tend = -1\n\tfor i in range(1, len(speeds)):\n\t\tadvS = (speeds[i] + speeds[i-1])/2 #smooth out noise in stop duration\n\t\tif speeds[i] == 0: #start of stop\n\t\t\tend = i\n\t\t\tif start == -1:\n\t\t\t\tstart = i\n\t\telif (start > -1) and (advS > 1):\n\t\t\tstops.append([start,end])\n\t\t\tstart = -1\n\t\t\tend = -1\n\tif start > -1:\n\t\tstops.append([start, len(speeds)])\n\treturn stops "}]}],"nested":[]},"currentVersion":{"title":"stops with smoothing"}},{"rootVersion":{"active":true,"id":"04370158c90ebb7d61d6fa8cf83dbf15b2074dd8","title":"Features-1-1-1","subtitle":0,"text":"\t \t#add a column for time in seconds (so if we chop data, still have timepoints)\n\t \tself.tripPath = np.append(tripPath, np.arange(tripPath.shape[0]).reshape(tripPath.shape[0],1),1)\n\n\t \tself.rdp = rdp.rdp_simplify(self.tripPath, epsilon = 0.75)\n\n\t \tself.angles = compute_AllAngles(self.rdp)\n\t \t#print self.angles\n\n\n\t \tself.v, self.tripDist = findSpeed_Dist(self.tripPath)\n\t \tself.findSpeed_Hist(self.tripPath)\n\n\t\tself.tripTime = self.tripPath.shape[0] #length of trip in seconds\n\t \tself.advSpeed = self.tripDist/self.tripTime #meters per second\n\t \tself.maxSpeed = max(self.v)\n\n\t \tself.stops = findStops(self.v)#len(findStops(self.v)) ","date":"09/21/2016 2:52pm","branches":[],"commits":[{"date":"09/21/2016 2:52pm","text":[{"text":"\t \t#add a column for time in seconds (so if we chop data, still have timepoints)\n\t \tself.tripPath = np.append(tripPath, np.arange(tripPath.shape[0]).reshape(tripPath.shape[0],1),1)\n\n\t \tself.rdp = rdp.rdp_simplify(self.tripPath, epsilon = 0.75)\n\n\t \tself.angles = compute_AllAngles(self.rdp)\n\t \t#print self.angles\n\n\n\t \tself.v, self.tripDist = findSpeed_Dist(self.tripPath)\n\t \tself.findSpeed_Hist(self.tripPath)\n\n\t\tself.tripTime = self.tripPath.shape[0] #length of trip in seconds\n\t \tself.advSpeed = self.tripDist/self.tripTime #meters per second\n\t \tself.maxSpeed = max(self.v)\n\n\t \tself.stops = findStops(self.v)#len(findStops(self.v)) "}]},{"date":"09/21/2016 2:54pm","text":[{"text":"\t \t#add a column for time in seconds (so if we chop data, still have timepoints)\n\t \tself.tripPath = np.append(tripPath, np.arange(tripPath.shape[0]).reshape(tripPath.shape[0],1),1)\n\n\t \tself.rdp = rdp.rdp_simplify(self.tripPath, epsilon = 0.75)\n\n\t \tself.angles = compute_AllAngles(self.rdp)\n\t \t#print self.angles\n\n\n\t \tself.v, self.tripDist = findSpeed_Dist(self.tripPath)\n\t \tself.findSpeed_Hist(self.tripPath)\n\n\t\tself.tripTime = self.tripPath.shape[0] #length of trip in seconds\n\t \tself.advSpeed = self.tripDist/self.tripTime #meters per second\n\t \tself.maxSpeed = max(self.v)\n\n\t \tself.stops = findStops(self.v)#len(findStops(self.v)) "}]},{"date":"09/21/2016 2:54pm","text":[{"text":"\t \t#add a column for time in seconds (so if we chop data, still have timepoints)\n\t \tself.tripPath = np.append(tripPath, np.arange(tripPath.shape[0]).reshape(tripPath.shape[0],1),1)\n\n\t \tself.rdp = rdp.rdp_simplify(self.tripPath, epsilon = 0.75)\n\n\t \tself.angles = compute_AllAngles(self.rdp)\n\t \t#print self.angles\n\n\n\t \tself.v, self.tripDist = findSpeed_Dist(self.tripPath)\n\t \tself.findSpeed_Hist(self.tripPath)\n\n\t\tself.tripTime = self.tripPath.shape[0] #length of trip in seconds\n\t \tself.advSpeed = self.tripDist/self.tripTime #meters per second\n\t \tself.maxSpeed = max(self.v)\n\n\t \tself.stops = findStops(self.v)#len(findStops(self.v)) "}]},{"date":"09/21/2016 2:55pm","text":[{"text":"\t \t#add a column for time in seconds (so if we chop data, still have timepoints)\n\t \tself.tripPath = np.append(tripPath, np.arange(tripPath.shape[0]).reshape(tripPath.shape[0],1),1)\n\n\t \tself.rdp = rdp.rdp_simplify(self.tripPath, epsilon = 0.75)\n\n\t \tself.angles = compute_AllAngles(self.rdp)\n\t \t#print self.angles\n\n\n\t \tself.v, self.tripDist = findSpeed_Dist(self.tripPath)\n\t \tself.findSpeed_Hist(self.tripPath)\n\n\t\tself.tripTime = self.tripPath.shape[0] #length of trip in seconds\n\t \tself.advSpeed = self.tripDist/self.tripTime #meters per second\n\t \tself.maxSpeed = max(self.v)\n\n\t \tself.stops = findStops(self.v)#len(findStops(self.v)) "}]}],"nested":[]},"currentVersion":{"title":"Features-1-1-1"}}]},"currentVersion":{"title":"driverTest.py"}}}}